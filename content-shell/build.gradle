apply plugin: 'android'

dependencies {
    compile files('libs/native-libs.jar')
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':base')
    compile project(':content')
    compile project(':eyes-free')
    compile project(':media')
    compile project(':net')
    compile project(':ui')
}

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

/*
 * Compress the native libs located at libs/ into archive file
 * libs/native-libs.jar
 * Destination directory inside the archive is lib/<arch>/<libs>
 *
 * Example of .jar needed structure :
 * |---lib/
 * 		|---armeabi/
 * 			|---libdatabase_sqlcipher.so
 * 			|---libsqlcipher_android.so
 * 			|---libstlport_shared.so
 *		|---x86/
 *   		|---libdatabase_sqlcipher.so
 *   		|---libsqlcipher_android.so
 *   		|---libstlport_shared.so
 *
 * reference : https://groups.google.com/forum/?fromgroups#!searchin/adt-dev/so/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J
 */
task nativeLibsToJar(
        type: Zip,
        description: 'create a jar archive of the native libs') {
    destinationDir file('./libs')
    baseName 'native-libs'
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

tasks.withType(Compile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

clean.dependsOn 'cleanNativeLibsToJar'
